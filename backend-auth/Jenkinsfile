pipeline {
  agent any
    environment {
//       AWS_PUBLIC_IP = '172.26.8.148'
//       SSH_CMD = 'ssh -i /var/jenkins_home/.ssh/id_rsa ubuntu@j10c206.p.ssafy.io'
//       DOCKER = 'sudo docker'
      repository = "gudrb4869/giveus_backend_auth"  //docker hub id와 repository 이름
      DOCKERHUB_CREDENTIALS = credentials('dockerhub') // jenkins에 등록해 놓은 docker hub credentials 이름
      dockerImage = ''
      REPO = "s10-blockchain-contract-sub2/S10P22C206"
    }

  stages {

    stage('SonarQube analysis') {
        steps {
            withSonarQubeEnv('SonarQube-server') {
                dir('./backend-auth') {
                    script {
                        sh "chmod +x ./gradlew"
                        sh './gradlew sonarqube'
                    }
                }
            }
        }
    }

    stage('Build') {
      steps {
        dir('./backend-auth') {
          script {
            sh "chmod +x ./gradlew"
            sh './gradlew clean build'
          }
        }
      }
    }

//      stage('SonarQube analysis') {
//         steps {
//             withSonarQubeEnv('SonarQube-Server') {
//                 dir('./backend') {
//                     sh './gradlew sonarqube'
//                 }
//             }
//         }
//      }

    stage('Build image') {
      steps {
        script {
          // sh "cp ~/workspace/backend_please/backend/build/libs/backend-0.0.1-SNAPSHOT.jar ~/workspace/backend_please" // jar 파일을 현재 위치로 복사
          dir('./backend-auth') {
            dockerImage = docker.build repository
          }
        }
      }
    }

    stage('Login'){
      steps{
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' // docker hub 로그인
      }
    }

    stage('Push image') {
      steps {
        script {
          sh 'docker push $repository' //docker push
        }
      }
    }

    stage('Clean image') {
      steps {
        sh 'docker rmi $repository' // jenkins 컨테이너에 있는 docker image 제거
      }
    }

    stage('Deployment') {
      steps {
        script {
          try {
            sh 'docker stop giveus_backend_auth'
            sh 'docker rm giveus_backend_auth'
          } catch (e) {
            sh 'echo "fail to stop and remove container"'
          }
        }
        sh 'docker pull $repository:latest'
        sh 'docker run --name giveus_backend_auth -d -p 8082:8082 $repository -e TZ=Asia/Seoul'
//         sh '$SSH_CMD $DOCKER compose up'
      }
    }
  }
}